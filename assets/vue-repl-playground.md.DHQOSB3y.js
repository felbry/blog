import{_ as e,c as t,o as s,a1 as a}from"./chunks/framework.Cq9cuCmX.js";const g=JSON.parse('{"title":"使用@vue/repl 定制 Playground","description":"","frontmatter":{},"headers":[],"relativePath":"vue-repl-playground.md","filePath":"vue-repl-playground.md","lastUpdated":1728639051000}'),l={name:"vue-repl-playground.md"},n=a('<h1 id="使用-vue-repl-定制-playground" tabindex="-1">使用@vue/repl 定制 Playground <a class="header-anchor" href="#使用-vue-repl-定制-playground" aria-label="Permalink to &quot;使用@vue/repl 定制 Playground&quot;">​</a></h1><p><img src="https://felbry.github.io/picx-images-hosting/image.6bh22961ab.webp" alt="image"></p><p>主流的组件库都有这样的预览功能，比如上图所示的<a href="https://element-plus.org/zh-CN/component/button.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95" target="_blank" rel="noreferrer">Element Plus - Button</a>。在预览之外，还有代码展示，Playground 交互演练场等功能。</p><p>Element Plus 的交互已经做的足够好，但从我个人写博客角度来看，还有以下诉求：</p><ul><li>源码可以通过配置决定是否常驻展示（因为示例代码要考虑 SEO）</li><li>playground 要在当前页面全屏打开，而不是另一个独立外链增加加载时间成本</li><li>playground 的环境最好是预集成好的，比如通过 CDN 加载一些需要的库</li><li>...</li></ul><p>以上个性化需求都需要针对性开发，因此可以参照 Element Plus 和@vue/repl 的代码，实现一个功能更加丰富的预览组件。</p><h2 id="约定使用规范" tabindex="-1">约定使用规范 <a class="header-anchor" href="#约定使用规范" aria-label="Permalink to &quot;约定使用规范&quot;">​</a></h2><p>在实现预览组件前，先要约定如何使用。</p><p>这里我们参照<a href="https://github.com/element-plus/element-plus/blob/dev/docs/en-US/component/button.md?plain=1" target="_blank" rel="noreferrer">element-plus/docs/en-US/component/button.md</a>的格式，其中预览组件的核心代码如下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::demo Use </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`disabled`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> attribute to determine whether a button is disabled. It accepts a </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`Boolean`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button/disabled</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::</span></span></code></pre></div><p>通过<code>:::demo</code>开头，<code>:::</code>结尾。中间包裹一个示例代码文件的相对路径，<code>:::demo</code>之后也可以补充一些描述。</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><p>通过使用规范，我们可以得出预览组件是通过 vitepress 的<a href="https://vitepress.dev/zh/guide/markdown#advanced-configuration" target="_blank" rel="noreferrer">Markdown 扩展</a>实现的。</p><p>我们先定位到 Element Plus 的 vitepress 配置文件：<a href="./.html"></a></p><p><a href="https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/config/index.mts" target="_blank" rel="noreferrer">https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/config/index.mts</a></p><p><a href="https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/config/plugins.ts" target="_blank" rel="noreferrer">https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/config/plugins.ts</a></p><p><a href="https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/plugins/demo.ts" target="_blank" rel="noreferrer">https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/plugins/demo.ts</a></p>',17),p=[n];function i(r,o,d,h,u,c){return s(),t("div",null,p)}const b=e(l,[["render",i]]);export{g as __pageData,b as default};
