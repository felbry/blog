import{_ as e,c as s,a4 as a,o as i}from"./chunks/framework.07rp2gkU.js";const l=JSON.parse('{"title":"用户权限设计及初始化","description":"","frontmatter":{},"headers":[],"relativePath":"strapi/users-permissions.md","filePath":"strapi/users-permissions.md","lastUpdated":1755769573000}'),r={name:"strapi/users-permissions.md"};function o(p,t,n,c,g,m){return i(),s("div",null,t[0]||(t[0]=[a('<h1 id="用户权限设计及初始化" tabindex="-1">用户权限设计及初始化 <a class="header-anchor" href="#用户权限设计及初始化" aria-label="Permalink to &quot;用户权限设计及初始化&quot;">​</a></h1><blockquote><p>基于 strapi 版本 5.23.0 分析</p></blockquote><p>strapi 的角色/权限分两套，分别是<strong>后台 Web 管理</strong>和<strong>系统用户</strong></p><figure><img src="https://img.wangj.top/image.1ovric5545.webp" alt="后台Web管理" tabindex="0"><figcaption>后台Web管理</figcaption></figure><figure><img src="https://img.wangj.top/image.7axhw77b3e.webp" alt="系统用户" tabindex="0"><figcaption>系统用户</figcaption></figure><p>这两类角色/权限在数据库中分别有自己的表，各自维护各自的。如果做一个系统，大概率是要从 系统用户 层面去管理角色/权限的，因此本文主要是分析 系统用户 层面的角色/权限设计，以及如何通过代码初始化固定的一些角色以及对应的权限（这样就不需要后台手动创建、勾选以及后续新增接口的再次勾选）</p>',6)]))}const f=e(r,[["render",o]]);export{l as __pageData,f as default};
