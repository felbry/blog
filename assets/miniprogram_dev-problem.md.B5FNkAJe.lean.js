import{_ as a,c as i,a4 as e,o as n}from"./chunks/framework.07rp2gkU.js";const c=JSON.parse('{"title":"开发遇到的问题","description":"","frontmatter":{},"headers":[],"relativePath":"miniprogram/dev-problem.md","filePath":"miniprogram/dev-problem.md","lastUpdated":1742881655000}'),t={name:"miniprogram/dev-problem.md"};function l(p,s,h,r,o,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="开发遇到的问题" tabindex="-1">开发遇到的问题 <a class="header-anchor" href="#开发遇到的问题" aria-label="Permalink to &quot;开发遇到的问题&quot;">​</a></h1><h2 id="skyline" tabindex="-1">skyline <a class="header-anchor" href="#skyline" aria-label="Permalink to &quot;skyline&quot;">​</a></h2><p>可以通过<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/changelog.html" target="_blank" rel="noreferrer">Skyline 更新日志</a>随时了解 skyline 的问题解决进度</p><h3 id="不支持-host选择器" tabindex="-1">不支持<code>:host</code>选择器 <a class="header-anchor" href="#不支持-host选择器" aria-label="Permalink to &quot;不支持\`:host\`选择器&quot;">​</a></h3><p>截止到 2025/3/25，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/status.html" target="_blank" rel="noreferrer">特性状态</a>的“支持:host 选择器”仍然是规划中</p><p>同时也可能不支持<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E8%99%9A%E6%8B%9F%E5%8C%96%E7%BB%84%E4%BB%B6%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">virtualHost</a>，已在开发者社区反馈：<a href="https://developers.weixin.qq.com/community/develop/doc/000c687ff1cad8b12213f294561400" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/000c687ff1cad8b12213f294561400</a></p><h3 id="flex-相关问题" tabindex="-1">flex 相关问题 <a class="header-anchor" href="#flex-相关问题" aria-label="Permalink to &quot;flex 相关问题&quot;">​</a></h3><p>文档说默认元素的<code>display</code>为<code>flex</code>，但<code>flex-direction</code>默认是<code>column</code></p><p>[基础库<code>3.6.6</code>/skyline<code>1.3.3</code>] 下还不支持<code>flex</code>的<code>gap</code>，需要通过<code>grid-view</code>实现。这个问题在 skyline<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/changelog.html#_1-4-1-2024-10-16" target="_blank" rel="noreferrer"><code>1.4.1</code></a>解决</p><h3 id="scroll-view-问题" tabindex="-1">scroll-view 问题 <a class="header-anchor" href="#scroll-view-问题" aria-label="Permalink to &quot;scroll-view 问题&quot;">​</a></h3><p><code>type</code>属性在文档中是可选，但横向滚动时必须指定（比如<code>type=&quot;custom&quot;</code>），否则展示有问题</p><p><code>scroll-view</code>的子元素高度撑不起它本身：这个问题在 skyline<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/changelog.html#_1-4-2-2024-11-19" target="_blank" rel="noreferrer"><code>1.4.2</code></a>解决，在此之前，都需要显式设置<code>scroll-view</code>的高度。高版本的可以启用<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/wxss.html#%E5%BC%80%E5%90%AFscroll-view%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80" target="_blank" rel="noreferrer"><code>enableScrollViewAutoSize</code></a></p><h3 id="页面-background-color-fff-无效" tabindex="-1">页面 background-color: #fff 无效？ <a class="header-anchor" href="#页面-background-color-fff-无效" aria-label="Permalink to &quot;页面 background-color: #fff 无效？&quot;">​</a></h3><p>无论是全局样式、本页面样式，设置后看着都不像纯白色</p><p>但是设置其它颜色又都有效果，存疑，可能是视觉效果</p><h2 id="通性" tabindex="-1">通性 <a class="header-anchor" href="#通性" aria-label="Permalink to &quot;通性&quot;">​</a></h2><h3 id="自定义-tabbar-的-tab-激活问题" tabindex="-1">自定义 tabbar 的 tab 激活问题 <a class="header-anchor" href="#自定义-tabbar-的-tab-激活问题" aria-label="Permalink to &quot;自定义 tabbar 的 tab 激活问题&quot;">​</a></h3><p>tab 激活的几种场景：</p><ul><li><p>正常进入，默认激活首页，用户再手动点击其它 tab</p><p>该场景只需要设置<code>selected</code>的默认值和<code>onSwitchTab</code>事件即可</p></li><li><p>用户从某个分享页或是其它场景<strong>启动</strong>，没在首页</p><p>需要设置<code>ready</code>的生命周期函数，通过<code>getCurrentPages</code>获取当前页面来动态设置 tab</p></li><li><p>用户在某个页面，完成交互后代码<code>switchTo</code>到了某个 tabbar 页面</p><p>此时由于自定义 tabbar 无法监听页面生命周期函数，也不能二次触发<code>ready</code>。只能把激活的逻辑判断写在对应的页面里。还有种更省事的办法就是尽量规避这种场景（比如只<code>switchTo</code>到最近激活的一个 tabbar 页面）</p></li></ul><h3 id="tabbar-遮挡问题" tabindex="-1">tabbar 遮挡问题 <a class="header-anchor" href="#tabbar-遮挡问题" aria-label="Permalink to &quot;tabbar 遮挡问题&quot;">​</a></h3><p>参考<a href="https://developers.weixin.qq.com/community/develop/doc/000ee4ccd6cfa8a67da76bad251000" target="_blank" rel="noreferrer">小程序 tabBar 层级 z-index 问题，自定义弹窗遮挡不住</a></p><p>按官方的话说，客户端原生的就是遮不住。(有人说在 webview 下设置 popup 根的<code>z-index</code>无限大可以，未尝试)</p><p>因此如果不是自定义 tabbar，可以通过<code>wx.hideTabBar</code>，<code>wx.showTabBar</code>来短暂隐藏</p><p>如果是自定义 tabbar，先在 tabbar 的<code>data</code>中定义<code>isVisible</code>，接着在 tabbar 的模板中通过<code>isVisible</code>来控制 tabbar 的<code>display</code>状态，最后在其它页面/组件中通过<code>this.getTabbar</code>获取实例来改变<code>isVisible</code>的值，以下是 skyline 下的示例代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    openPopup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tabBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tabBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          isVisible: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    closePopup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tabBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tabBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          isVisible: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="ios-日期格式" tabindex="-1">iOS 日期格式 <a class="header-anchor" href="#ios-日期格式" aria-label="Permalink to &quot;iOS 日期格式&quot;">​</a></h3><p><code>new Date(&#39;2021-7-7 14:59:32&#39;)</code>本地开发是个正常日期对象，iOS 真机是<code>NAN</code></p><p>开发工具监测到这种写法时，也会提示：</p><blockquote><p>new Date(&quot;2025-01-21 09:00:00&quot;) 在部分 iOS 下无法正常使用，iOS 只支持 &quot;yyyy/MM/dd&quot;、&quot;yyyy/MM/dd HH:mm:ss&quot;、&quot;yyyy-MM-dd&quot;、&quot;yyyy-MM-ddTHH:mm:ss&quot;、&quot;yyyy-MM-ddTHH:mm:ss+HH:mm&quot; 的格式</p></blockquote><h3 id="js-文件间的-import-和-export" tabindex="-1">js 文件间的 import 和 export <a class="header-anchor" href="#js-文件间的-import-和-export" aria-label="Permalink to &quot;js 文件间的 import 和 export&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a1.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a1.wxml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a2.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a2.wxml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b1.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b1.wxml</span></span></code></pre></div><p><code>a1.js</code> 和 <code>a2.js</code> 是可以相互 <code>import</code> 和 <code>export</code> 的（按需引入），真机上也没问题</p><p>但 <code>b1.js</code> 如果 <code>import</code> 了 <code>a1.js</code> 或 <code>a2.js</code> 的，本地开发没问题，真机会报错</p>`,33)]))}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
