import{_ as s,c as a,a4 as e,o as t}from"./chunks/framework.07rp2gkU.js";const c=JSON.parse('{"title":"uni-app 使用 webview 自定义返回逻辑","description":"","frontmatter":{},"headers":[],"relativePath":"uni-app/webview-back.md","filePath":"uni-app/webview-back.md","lastUpdated":1732181289000}'),n={name:"uni-app/webview-back.md"};function p(l,i,h,k,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="uni-app-使用-webview-自定义返回逻辑" tabindex="-1">uni-app 使用 webview 自定义返回逻辑 <a class="header-anchor" href="#uni-app-使用-webview-自定义返回逻辑" aria-label="Permalink to &quot;uni-app 使用 webview 自定义返回逻辑&quot;">​</a></h1><p>纯 H5 应用，想做成原生 APP，可以通过 uni-app 的 webview 组件实现</p><p>首先在 uni-app 端新建一个页面：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-gQ63T" id="tab-Z4-juOG" checked><label data-title="pages/index/index.vue" for="tab-Z4-juOG">pages/index/index.vue</label></div><div class="blocks"><div class="language-vue vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></div></div><p>如果 H5 想全屏展示（包含状态栏），参考<a href="https://uniapp.dcloud.net.cn/collocation/pages.html#customnav" target="_blank" rel="noreferrer">自定义导航栏使用注意</a>，配置过后 webview 的尺寸就是全屏了</p><p>此时在 H5 中点击跳转几个页面，当点击安卓的返回键或是侧滑返回时，<strong>由于当前 uni-app 只有一个 index 页面</strong>，没有其它页面可退，所以默认提示“再按一次退出应用”</p><div class="info custom-block"><p class="custom-block-title">问题：为什么返回行为并没有触发 webview 的 history back 呢？如何将“系统按键/侧滑 返回”映射到 webview 的 history back？</p></div><p>要搞清楚它，先看<a href="https://uniapp.dcloud.net.cn/component/web-view.html#app%E7%AB%AFweb-view%E7%9A%84%E6%89%A9%E5%B1%95" target="_blank" rel="noreferrer">App 端 web-view 的扩展</a>这句话：</p><blockquote><p>每个 vue 页面，其实都是一个 webview，而 vue 页面里的 web-view 组件，其实是 webview 里的一个子 webview。这个子 webview 被 append 到父 webview 上</p></blockquote><p>也就是说，页面内的<code>&lt;web-view :src=&quot;xxx&quot;&gt;&lt;/web-view&gt;</code>实则是子 web-view，当用户返回时，直接作用对象是父 web-view，子是感知不到的</p><p>而父 web-view 的默认返回行为是什么呢？我理解应该是根据<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#%E9%A1%B5%E9%9D%A2%E6%A0%88" target="_blank" rel="noreferrer">页面栈</a>返回，直到返回到第一个页面，就会弹出提示：“再按一次退出应用”</p><div class="info custom-block"><p class="custom-block-title">问题：那如何将返回映射到子 web-view 呢？</p></div><p>可以通过重写父 web-view 的默认返回行为：获取到子 web-view 对象，执行子 web-view 的返回动作。uni-app 提供了<code>onBackPress</code>声明周期函数来实现，详见<a href="#方案一-onbackpress-仅适用-android">方案一：onBackPress（仅适用 Android）</a></p><h2 id="方案一-onbackpress-仅适用-android" tabindex="-1">方案一：onBackPress（仅适用 Android） <a class="header-anchor" href="#方案一-onbackpress-仅适用-android" aria-label="Permalink to &quot;方案一：onBackPress（仅适用 Android）&quot;">​</a></h2><p>阅读<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#onbackpress" target="_blank" rel="noreferrer">教程 - 页面 - onBackPress</a>、<a href="https://ask.dcloud.net.cn/article/35120" target="_blank" rel="noreferrer">uni-app 自定义返回逻辑教程</a>，提取到以下信息：</p><ul><li><code>onBackPress</code> 函数如果返回<code>true</code>，代表阻止默认行为，完全由你掌控逻辑；但该函数不可使用 async，会导致无法阻止默认返回</li><li>iOS 端<strong>侧滑返回</strong>不会触发<code>onBackPress</code></li><li>以下三种场景会触发<code>onBackPress</code>： <ol><li>Android 实体返回键/侧滑（<code>event.from = &#39;backbutton&#39;</code>）</li><li>顶部导航栏左边的返回按钮（<code>event.from = &#39;backbutton&#39;</code>）</li><li>uni-app 的返回 API，即<code>uni.navigateBack()</code>（<code>event.from = &#39;navigateBack&#39;</code>）</li></ol></li><li>它是页面级生命周期函数，非组件级</li></ul><p>了解后，按照上述思路实现：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-BLA90" id="tab-ZZ97ooX" checked><label data-title="pages/index/index.vue" for="tab-ZZ97ooX">pages/index/index.vue</label></div><div class="blocks"><div class="language-vue vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onBackPress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">evt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childWv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$getAppWebview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    childWv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canBack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">evt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // true or false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (evt.canBack) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        childWv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></div></div><ul><li>参考<a href="https://uniapp.dcloud.net.cn/api/window/window.html#getappwebview" target="_blank" rel="noreferrer">API-&gt;页面和路由-&gt;页面-&gt;$getAppWebview()</a>、<a href="https://ask.dcloud.net.cn/article/35036" target="_blank" rel="noreferrer">例子 6 uni-app 可以在 vue 页面里写 web-view 组件，这个组件如何用 plus api 操作？</a>，<code>$getAppWebview()</code>就是当前页面 web-view（即上述的父 web-view），本例中只有一个子 web-view，通过<code>.children()[0]</code>获取</li><li>有了子 web-view 对象，利用<a href="https://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject" target="_blank" rel="noreferrer">WebviewObject API</a>实现返回，本例使用了<code>canBack()</code>和<code>back()</code>方法</li></ul><h2 id="方案二-plus-key-addeventlistener-backbutton" tabindex="-1">方案二：plus.key.addEventListener(&#39;backbutton&#39;, () =&gt; {}) <a class="header-anchor" href="#方案二-plus-key-addeventlistener-backbutton" aria-label="Permalink to &quot;方案二：plus.key.addEventListener(&#39;backbutton&#39;, () =&gt; {})&quot;">​</a></h2>`,20)]))}const o=s(n,[["render",p]]);export{c as __pageData,o as default};
