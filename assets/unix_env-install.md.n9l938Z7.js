import{_ as s,c as i,o as a,aR as n}from"./chunks/framework.DHENRzwb.js";const F=JSON.parse('{"title":"环境安装","description":"","frontmatter":{},"headers":[],"relativePath":"unix/env-install.md","filePath":"unix/env-install.md","lastUpdated":1724137439000}'),l={name:"unix/env-install.md"},t=n(`<h1 id="环境安装" tabindex="-1">环境安装 <a class="header-anchor" href="#环境安装" aria-label="Permalink to &quot;环境安装&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 Ubuntu 系统下，每次安装包之前，先执行<code>sudo apt update &amp;&amp; sudo apt upgrade</code></p></div><h2 id="zsh" tabindex="-1">ZSH <a class="header-anchor" href="#zsh" aria-label="Permalink to &quot;ZSH&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 查看当前所有shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/shells</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 默认是找不到zsh的，可以通过apt安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zsh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 查看当前用户默认shell</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $SHELL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. 如果zsh不是当前用户默认shell，进行切换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chsh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/zsh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此时可能需要重启终端程序才能应用</span></span></code></pre></div><p>重新启动后可能会弹出这个弹窗，因为没有默认的 zsh 配置文件</p><p><img src="https://felbry.github.io/picx-images-hosting/image.7i0b89uk7x.webp" alt="image"></p><p>选择 2，初始化一个配置文件。完成后通过 vim 命令就能查看到这个配置文件内容了</p><p><img src="https://felbry.github.io/picx-images-hosting/image.3d4pw5ytfb.webp" alt="image"></p><h3 id="安装-oh-my-zsh" tabindex="-1">安装 oh-my-zsh <a class="header-anchor" href="#安装-oh-my-zsh" aria-label="Permalink to &quot;安装 oh-my-zsh&quot;">​</a></h3><p>有条件的优先<a href="https://ohmyz.sh/#install" target="_blank" rel="noreferrer">官网方式</a>，没条件走国内镜像：<code>sh -c &quot;$(wget -O- https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;</code></p><p><img src="https://felbry.github.io/picx-images-hosting/image.4n7n2hjd9p.webp" alt="image"></p><p><strong>安装插件 zsh-autosuggestions</strong></p><p>先下载到 oh-my-zsh 自定义插件目录中（可以通过<code>echo $ZSH_CUSTOM</code>确认下是否有这个变量）</p><p>执行<code>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code>，再编辑<code>vim ~/.zshrc</code>，将插件名追加到 plugins 中，<code>plugins=(git zsh-autosuggestions)</code>，最后重载配置：<code>source ~/.zshrc</code></p><h3 id="常用的-zshrc-配置" tabindex="-1">常用的.zshrc 配置 <a class="header-anchor" href="#常用的-zshrc-配置" aria-label="Permalink to &quot;常用的.zshrc 配置&quot;">​</a></h3><p>别名和函数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 快速查看git状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git status&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># g2r 为 git to remote 缩写，常用快速提交本地代码到远程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g2r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # default commit message is \`update\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # closing statement of if-else block</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 NVM 自动切换 node 版本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># autoload是zsh的内置命令，用于延迟加载shell函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -U 表示自动加载的函数将在本地定义</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># add-zsh-hook是zsh提供的函数，用于在特定事件（如目录更改）上注册钩子函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所以该命令就是提前加载了本地zsh内置的add-zsh-hook函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">autoload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add-zsh-hook</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义函数load-nvmrc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load-nvmrc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # -f 检测文件是否存在且是一个普通文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果有 执行nvm use</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .nvmrc ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果没有 .nvmrc 文件，自动切换为default版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># preexec 在每个命令执行之前运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># precmd 在每个命令执行之后、提示符显示之前运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zshexit 在 shell 退出时运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># periodic 在设定的时间间隔内自动运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加 chpwd 钩子，在改变当前工作目录时(cd、pushd、popd)执行 load-nvmrc函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add-zsh-hook</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chpwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load-nvmrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># shell启动时（新建shell）也会立即执行一次函数，确保切换到正确的版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load-nvmrc</span></span></code></pre></div><h2 id="ffmepg" tabindex="-1">ffmepg <a class="header-anchor" href="#ffmepg" aria-label="Permalink to &quot;ffmepg&quot;">​</a></h2><p><code>sudo apt install ffmpeg</code></p><p><a href="https://www.bytezonex.com/archives/100.html" target="_blank" rel="noreferrer">如何在 Ubuntu 上安装 FFmpeg：两种简单的方法</a></p><h2 id="node-js-npm" tabindex="-1">Node.js(npm) <a class="header-anchor" href="#node-js-npm" aria-label="Permalink to &quot;Node.js(npm)&quot;">​</a></h2><h3 id="nvm-推荐" tabindex="-1">nvm（推荐） <a class="header-anchor" href="#nvm-推荐" aria-label="Permalink to &quot;nvm（推荐）&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>安装 nvm 前，最好卸载本机所有相关的 Node.js 版本。（如果要给 WSL 安装，Windows 平台的 Node.js 版本也要先行卸载）</p></div><p>参见<a href="https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script" target="_blank" rel="noreferrer">Install &amp; Update Script</a>，一条命令完成安装：</p><p><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash</code></p><p>（如果终端网络访问不通但是浏览器可以，那就先在浏览器端下载这个脚本，通过 bash 命令运行它）</p><details class="details custom-block"><summary>可能遇到的一些错误</summary><div class="caution custom-block github-alert"><p class="custom-block-title">错误一</p><p>在<code>bash install-nvm.sh</code>时，报<code>error: RPC failed; curl 16 Error in the HTTP2 framing layer</code></p></div><p>完整的报错如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@felbry:/mnt/c/a#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install-nvm.sh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Downloading</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/root/.nvm&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Cloning</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> into</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/root/.nvm&#39;...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RPC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTP2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> framing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> layer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fatal:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flush</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> after</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ref</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> report</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this!</span></span></code></pre></div><p>这个错误出现在 WSL Ubuntu 22 版本，执行 nvm 的安装脚本时。重启终端或电脑重新执行就正常了。</p><div class="caution custom-block github-alert"><p class="custom-block-title">错误二</p><p>当执行<code>nvm install &lt;version&gt;</code>时，报错“找不到该版本”。通过<code>nvm ls-remote</code>，查到的可用版本只有 iojs 的，没有 Node.js 的。</p></div><p>将环境变量<code>NVM_NODEJS_ORG_MIRROR</code>设置成淘宝源即可：<code>https://npmmirror.com/mirrors/node/</code></p><p>查看当前值：<code>echo $NVM_NODEJS_ORG_MIRROR</code></p><p>设置的几种方式：</p><ul><li>运行时设置：<code>NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node nvm ls-remote</code></li><li>临时设置（该终端打开的生命周期内）：<code>NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node nvm ls-remote</code></li><li>永久设置：<code>vim ~/.zshrc</code>，<code>export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node</code>，<code>:wq</code>保存</li></ul><div class="caution custom-block github-alert"><p class="custom-block-title">错误三</p><p>安装完 node 后，执行<code>node -v</code>时，报<code>node: /lib/x86_64-linux-gnu/libc.so.6: version </code>GLIBC_2.28&#39; not found (required by node)\`的错误</p></div><p>这个错误出现<strong>Ubuntu 18.04 (Bionic Beaver)</strong>，且 Node.js 的版本较高。</p><p>根据<a href="https://stackoverflow.com/questions/72921215/getting-glibc-2-28-not-found" target="_blank" rel="noreferrer">Getting GLIBC_2.28 not found</a>的说法，18 版本只包含 glibc 2.27，而高版本的 Node.js 需要 glibc 2.28。</p><p>因此要么在 Ubuntu 系统下安装高版本 glibc，要么升级 Ubuntu 系统。</p></details><h3 id="固定版本-不推荐" tabindex="-1">固定版本（不推荐） <a class="header-anchor" href="#固定版本-不推荐" aria-label="Permalink to &quot;固定版本（不推荐）&quot;">​</a></h3><p><a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noreferrer">Download Node.js the way you want</a>，选择 Linux 平台，官方推荐了几种形式，其中就有 nvm。</p><h2 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h2><p>Ubuntu 22 下安装：</p><p><code>sudo apt install nginx</code></p>`,34),h=[t];function p(e,k,r,d,o,c){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{F as __pageData,y as default};
